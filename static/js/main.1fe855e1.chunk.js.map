{"version":3,"sources":["PlayerInput/index.js","PlayerDetails/index.js","PrimaryObjectiveScorer/RoundScorerPointSelector.js","PrimaryObjectiveScorer/RoundScorer.js","PrimaryObjectiveScorer/index.js","SecondaryObjectiveScorer/SecondaryObjectiveTally.js","SecondaryObjectiveScorer/index.js","Player/index.js","App.js","index.js"],"names":["PlayerInput","id","type","label","onChange","value","className","htmlFor","e","target","PlayerDetails","useState","name","setName","cp","setCP","faction","setFaction","RoundScorerPointSelector","handlePointSelection","points","selected","classes","classNames","onClick","RoundScorer","round","handlePointUpdate","currentSelection","setCurrentSelection","useCallback","newPoints","calculateTotal","Object","values","reduce","total","PrimaryObjectiveScorer","updateTotal","round2","round3","round4","round5","setPoints","useEffect","SecondaryObjectiveTally","number","objectiveName","setObjectiveName","selectedPoint","setSelectedPoint","handlePointTally","i","push","key","SecondaryObjectiveScorer","secondary1","secondary2","secondary3","secondary","Player","primaryPoints","setPrimaryPoints","secondaryPoints","setSecondaryPoints","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fe855e1.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./style.css\";\n\nconst PlayerInput = ({id, type = \"text\", label, onChange, value, className}) => {\n\n  return (\n    <div className={`PlayerInput ${className}`}>\n      <label htmlFor={id}>{label}</label>\n      <input\n        type={ type }\n        id={id}\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n      />\n    </div>\n  );\n};\n\nPlayerInput.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.oneOf([\"text\", \"number\"]),\n  label: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  className: PropTypes.string\n};\n\nexport default PlayerInput;","import React, { useState }  from \"react\";\nimport PropTypes from \"prop-types\";\nimport PlayerInput from \"../PlayerInput\";\n\nimport \"./style.css\";\n\nconst PlayerDetails = ({id}) => {\n  const [name, setName] = useState(\"\");\n  const [cp, setCP] = useState(\"0\");\n  const [faction, setFaction] = useState(\"\");\n\n  return (\n    <div className=\"PlayerDetails\">\n      <PlayerInput\n        id={`player-name-${id}`}\n        label={`Player ${id} Name`}\n        onChange={setName}\n        value={name}\n        className=\"PlayerInput__name\"\n      />\n      <PlayerInput\n        id={`cp-${id}`}\n        type=\"number\"\n        label={\"CP\"}\n        onChange={setCP}\n        value={cp}\n        className=\"PlayerInput__cp\"\n      />\n      <PlayerInput\n        id={`faction-${id}`}\n        label={\"Faction\"}\n        onChange={setFaction}\n        value={faction}\n      />\n    </div>\n  );\n};\n\nPlayerDetails.propTypes = {\n  id: PropTypes.number.isRequired\n};\n\nexport default PlayerDetails;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nconst RoundScorerPointSelector = ({handlePointSelection, points, selected}) => {\n  const classes = classNames(\"RoundScorer__element\", \"RoundScorer__points\", {\n    \"RoundScorer__points--active\": selected\n  });\n\n  return (\n    <div\n      className={ classes }\n      onClick={() => handlePointSelection(points)}\n    >\n      { points }\n    </div>\n  );\n};\n\nRoundScorerPointSelector.propTypes = {\n  handlePointSelection: PropTypes.func.isRequired,\n  points: PropTypes.oneOf([5, 10, 15]).isRequired,\n  selected: PropTypes.bool.isRequired\n};\n\nexport default RoundScorerPointSelector;","import React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport RoundScorerPointSelector from \"./RoundScorerPointSelector\";\n\nconst RoundScorer = ({round, handlePointUpdate}) => {\n  const [currentSelection, setCurrentSelection] = useState(false);\n\n  const handlePointSelection = useCallback((newPoints) => {\n    if(currentSelection === newPoints) {\n      setCurrentSelection(false);\n      handlePointUpdate(0);\n    } else {\n      setCurrentSelection(newPoints);\n      handlePointUpdate(newPoints);\n    }\n  }, [handlePointUpdate, currentSelection]);\n\n  return (\n    <div className=\"RoundScorer\">\n      <div className=\"RoundScorer__element RoundScorer__title\">Primary Objective - Round { round }</div>\n      <RoundScorerPointSelector\n        handlePointSelection={handlePointSelection}\n        points={5}\n        selected={currentSelection === 5}/>\n\n      <RoundScorerPointSelector\n        handlePointSelection={handlePointSelection}\n        points={10}\n        selected={currentSelection === 10}/>\n\n      <RoundScorerPointSelector\n        handlePointSelection={handlePointSelection}\n        points={15}\n        selected={currentSelection === 15}/>\n    </div>\n  );\n};\n\nRoundScorer.propTypes = {\n  round: PropTypes.number.isRequired,\n  handlePointUpdate: PropTypes.func.isRequired\n};\n\nexport default RoundScorer;","import React, { useState, useCallback, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport RoundScorer from \"./RoundScorer\";\n\nimport \"./style.css\";\n\nconst calculateTotal = (points) => Object.values(points).reduce((total, round) => {\n  total += round;\n  return total >= 45 ? 45 : total;\n}, 0);\n\nconst PrimaryObjectiveScorer = ({ updateTotal }) => {\n  const [points, setPoints] = useState({\n    round2: 0,\n    round3: 0,\n    round4: 0,\n    round5: 0,\n  });\n\n  useEffect(() => {\n    updateTotal(calculateTotal(points));\n  }, [points, updateTotal]);\n\n  const handlePointUpdate = useCallback((round, total) => {\n    setPoints({\n      ...points,\n      ...{[`round${round}`]: total}\n    });\n  }, [setPoints, points]);\n\n  return (\n    <div className=\"PrimaryObjectiveScorer\">\n      <RoundScorer\n        round={2}\n        handlePointUpdate={(points) => handlePointUpdate(2, points)} />\n      <RoundScorer\n        round={3}\n        handlePointUpdate={(points) => handlePointUpdate(3, points)} />\n      <RoundScorer\n        round={4}\n        handlePointUpdate={(points) => handlePointUpdate(4, points)} />\n      <RoundScorer\n        round={5}\n        handlePointUpdate={(points) => handlePointUpdate(5, points)} />\n\n      <div className=\"total-points\">\n        <div className=\"total-points__label\">\n                    Primary Points Total\n        </div>\n        <div className=\"total-points__number\">\n          { calculateTotal(points) } / 45\n        </div>\n      </div>\n    </div>\n  );\n};\n\nPrimaryObjectiveScorer.propTypes = {\n  updateTotal: PropTypes.func.isRequired\n};\n\nexport default PrimaryObjectiveScorer;","import React, { useState, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport PlayerInput from \"../PlayerInput\";\nimport classNames from \"classnames\";\nimport \"./style.css\";\n\nconst SecondaryObjectiveTally = ({ number, handlePointUpdate }) => {\n  const [objectiveName, setObjectiveName] = useState(\"\");\n  const [selectedPoint, setSelectedPoint] = useState(false);\n\n  const handlePointTally = useCallback((newPoints) => {\n    if(selectedPoint === newPoints) {\n      setSelectedPoint(false);\n      handlePointUpdate(0);\n    } else {\n      setSelectedPoint(newPoints);\n      handlePointUpdate(newPoints);\n    }\n  }, [handlePointUpdate, selectedPoint]);\n\n  const points = [];\n  for (let i=1; i <= 15; i++) {\n    const classes = classNames(\"SecondaryObjectiveTally__point\", {\n      \"SecondaryObjectiveTally__point--selected\": selectedPoint === i,\n      \"SecondaryObjectiveTally__point--tallied\": i < selectedPoint\n    });\n\n    points.push(\n      <div\n        onClick={() => handlePointTally(i)}\n        className={ classes }\n        key={i}\n      >\n        { i }\n      </div>\n    );\n  }\n\n  return(\n    <div className=\"SecondaryObjectiveTally\">\n      <PlayerInput\n        id={`secondary-objective-${number}`}\n        label={`Secondary ${number}`}\n        onChange={setObjectiveName}\n        value={objectiveName}\n        className=\"PlayerInput__secondary\"\n      />\n      <div className=\"SecondaryObjectiveTally__point-wrapper\">\n        { points }\n      </div>\n    </div>\n  );\n};\n\nSecondaryObjectiveTally.propTypes = {\n  number: PropTypes.string.isRequired,\n  handlePointUpdate: PropTypes.func.isRequired\n};\n\nexport default SecondaryObjectiveTally;","import React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SecondaryObjectiveTally from \"./SecondaryObjectiveTally\";\n\nconst calculateTotal = (points) => Object.values(points).reduce((total, round) => {\n  total += round;\n  return total >= 45 ? 45 : total;\n}, 0);\n\nconst SecondaryObjectiveScorer = ({updateTotal}) => {\n  const [points, setPoints] = useState({\n    secondary1: 0,\n    secondary2: 0,\n    secondary3: 0,\n  });\n\n  const handlePointUpdate = useCallback((secondary, total) => {\n    setPoints({\n      ...points,\n      ...{[`secondary${secondary}`]: total}\n    });\n  }, [setPoints, points]);\n\n  useEffect(() => {\n    updateTotal(calculateTotal(points));\n  }, [points, updateTotal]);\n\n  return(\n    <div className=\"SecondaryObjectiveScorer\">\n      <SecondaryObjectiveTally\n        number=\"One\"\n        handlePointUpdate={(points) => handlePointUpdate(1, points)} />\n      <SecondaryObjectiveTally\n        number=\"Two\"\n        handlePointUpdate={(points) => handlePointUpdate(2, points)} />\n      <SecondaryObjectiveTally\n        number=\"Three\"\n        handlePointUpdate={(points) => handlePointUpdate(3, points)}/>\n\n      <div className=\"total-points\">\n        <div className=\"total-points__label\">\n                    Secondary Points Total\n        </div>\n        <div className=\"total-points__number\">\n          { calculateTotal(points) } / 45\n        </div>\n      </div>\n    </div>\n  );\n};\n\nSecondaryObjectiveScorer.propTypes = {\n  updateTotal: PropTypes.func.isRequired\n};\n\nexport default SecondaryObjectiveScorer;","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport PlayerDetails from \"../PlayerDetails\";\nimport PrimaryObjectiveScorer from \"../PrimaryObjectiveScorer\";\nimport SecondaryObjectiveScorer from \"../SecondaryObjectiveScorer\";\n\nimport \"./style.css\";\n\nconst Player = ({id}) => {\n  const [primaryPoints, setPrimaryPoints] = useState(0);\n  const [secondaryPoints, setSecondaryPoints] = useState(0);\n\n  return (\n    <div className=\"Player\">\n      <PlayerDetails id={id} />\n      <PrimaryObjectiveScorer updateTotal={setPrimaryPoints} />\n      <SecondaryObjectiveScorer updateTotal={setSecondaryPoints} />\n\n      <div className=\"total-points\">\n        <div className=\"total-points__label\">\n                    Final Total\n        </div>\n        <div className=\"total-points__number\">\n          { primaryPoints + secondaryPoints } / 90\n        </div>\n      </div>\n    </div>\n  );\n};\nPlayer.propTypes = {\n  id: PropTypes.number.isRequired\n};\n\nexport default Player;","import React from \"react\";\nimport Player from \"./Player/index\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Player id={1} />\n      <Player id={2} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}